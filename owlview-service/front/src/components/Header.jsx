import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import styles from "../styles/Header.module.css";
import apiClient from "../utils/axiosConfig";
import OwlLogo from '../assets/owl-logo-animated.svg';

const Header = ({ user, onLogout }) => {
  const navigate = useNavigate();
  const [unreadMessages, setUnreadMessages] = useState(0);
  const [pendingVerifications, setPendingVerifications] = useState(0);
  const [surveyInvitationsCount, setSurveyInvitationsCount] = useState(0);
  const [unreadNotifications, setUnreadNotifications] = useState(0);
  const [activeTab, setActiveTab] = useState("–ì–æ–ª–æ–≤–Ω–∞");
  const [sidebarOpen, setSidebarOpen] = useState(false);

  useEffect(() => {
    const fetchHomeData = async () => {
      try {
        const response = await apiClient.get("/home-data", {
          headers: {
            Authorization: `Bearer ${sessionStorage.getItem("authToken")}`,
          },
        });
        if (response.data.success) {
          setUnreadMessages(response.data.unreadMessages);
          setPendingVerifications(response.data.pendingVerifications);
          setSurveyInvitationsCount(response.data.surveyInvitationsCount);
          setUnreadNotifications(response.data.unreadNotifications);
        }
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ home-data:", error);
      }
    };

    const path = window.location.pathname;
    if (path === "/") setActiveTab("–ì–æ–ª–æ–≤–Ω–∞");
    else if (path === "/surveys") setActiveTab("–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è");
    else if (path === "/users") setActiveTab("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ");
    else if (path === "/admin-user-surveys") setActiveTab("–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤");
    else if (path === "/tariffs") setActiveTab("–¢–∞—Ä–∏—Ñ–∏");
    else if (path === "/personal_cabinet") setActiveTab("–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç");
    else if (path === "/balance") setActiveTab("–ë–∞–ª–∞–Ω—Å —ñ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É");
    else if (path === "/support") setActiveTab("–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞");
    else if (path === "/verification") setActiveTab("–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π");
    else if (path === "/notifications") setActiveTab("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è");
    else if (path === "/news") setActiveTab("–ù–æ–≤–∏–Ω–∏");
    else if (path === "/logs") setActiveTab("–õ–æ–≥–∏");

    if (user) {
      fetchHomeData();

      const handleResize = () => {
        if (window.innerWidth > 1024) {
          setSidebarOpen(false);
        }
      };

      window.addEventListener("resize", handleResize);
      return () => window.removeEventListener("resize", handleResize);
    }
  }, [user, window.location.pathname]);

  const mainNavItems = [
    { name: "–ì–æ–ª–æ–≤–Ω–∞", icon: "üè†", path: "/" },
    { name: "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è", icon: "üìã", path: "/surveys", badge: surveyInvitationsCount },
    { name: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", icon: "üë•", path: "/users" },
    { name: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", icon: "üîî", path: "/notifications", badge: unreadNotifications },
    { name: "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", icon: "üõ†Ô∏è", path: "/support", badge: unreadMessages }
  ];

  const adminTabs = [
    { name: "–ì–æ–ª–æ–≤–Ω–∞", icon: "üè†", path: "/" },
    { name: "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è", icon: "üìã", path: "/surveys", badge: surveyInvitationsCount },
    { name: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", icon: "üë•", path: "/users" },
    { name: "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", icon: "üìä", path: "/admin-user-surveys" },
    { name: "–õ–æ–≥–∏", icon: "üìù", path: "/logs" },
    { name: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", icon: "üîî", path: "/notifications", badge: unreadNotifications },
    { name: "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞", icon: "üõ†Ô∏è", path: "/support", badge: unreadMessages },
    { name: "–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π", icon: "‚úÖ", path: "/verification", badge: pendingVerifications },
    { name: "–ë–∞–ª–∞–Ω—Å —Ç–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É", icon: "üí∞", path: "/balance" },
    { name: "–¢–∞—Ä–∏—Ñ–∏", icon: "üíº", path: "/tariffs" },
    { name: "–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç", icon: "üë§", path: "/personal_cabinet" },
    { name: "–ù–æ–≤–∏–Ω–∏", icon: "üì∞", path: "/news" },
  ];

  const clientTabs = [
    { name: "–ì–æ–ª–æ–≤–Ω–∞", icon: "üè†", path: "/" },
    { name: "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è", icon: "üìã", path: "/surveys", badge: surveyInvitationsCount },
    { name: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", icon: "üë•", path: "/users" },
    { name: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", icon: "üîî", path: "/notifications", badge: unreadNotifications },
    { name: "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞", icon: "üõ†Ô∏è", path: "/support", badge: unreadMessages },
    { name: "–ë–∞–ª–∞–Ω—Å —Ç–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É", icon: "üí∞", path: "/balance" },
    { name: "–¢–∞—Ä–∏—Ñ–∏", icon: "üíº", path: "/tariffs" },
    { name: "–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç", icon: "üë§", path: "/personal_cabinet" },
    { name: "–ù–æ–≤–∏–Ω–∏", icon: "üì∞", path: "/news" },
  ];

  const organizationTabs = [
    { name: "–ì–æ–ª–æ–≤–Ω–∞", icon: "üè†", path: "/" },
    { name: "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è", icon: "üìã", path: "/surveys", badge: surveyInvitationsCount },
    { name: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", icon: "üë•", path: "/users" },
    { name: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", icon: "üîî", path: "/notifications", badge: unreadNotifications },
    { name: "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞", icon: "üõ†Ô∏è", path: "/support", badge: unreadMessages },
    { name: "–ë–∞–ª–∞–Ω—Å —Ç–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É", icon: "üí∞", path: "/balance" },
    { name: "–¢–∞—Ä–∏—Ñ–∏", icon: "üíº", path: "/tariffs" },
    { name: "–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç", icon: "üë§", path: "/personal_cabinet" },
    { name: "–ù–æ–≤–∏–Ω–∏", icon: "üì∞", path: "/news" },
  ];

  let availableTabs = [];
  if (user?.role === "admin") {
    availableTabs = adminTabs;
  } else if (user?.role === "client") {
    availableTabs = clientTabs;
  } else if (user?.role === "organization") {
    availableTabs = organizationTabs;
  }

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  const handleNavigation = (path) => {
    navigate(path);
  };

  const handleLogout = async () => {
    try {
      const token = sessionStorage.getItem("authToken");
      if (!token) {
        alert("–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.");
        return;
      }

      const response = await apiClient.post("/logout", {}, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (response.data.success) {
        sessionStorage.removeItem("authToken");
        sessionStorage.removeItem("user");
        alert("–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏!");
        navigate("/login");
        if (onLogout) onLogout();
      } else {
        alert("–ü–æ–º–∏–ª–∫–∞: " + response.data.message);
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ:", error);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–π—Ç–∏ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏.");
    }
  };

  return (
    <header className={styles.header}>
      <div className={styles.headerContent}>
        <div className={styles.logo} onClick={() => navigate("/")}>
          OwlView
          {/* <img src={OwlLogo} alt="Owl Logo" className={styles.owlLogo} /> */}
        </div>

        {user && (
          <>
            <div className={styles.headerNav}>
              {mainNavItems.map((item, index) => (
                <button
                  key={index}
                  className={`${styles.navButton} ${activeTab === item.name ? styles.active : ''}`}
                  onClick={() => handleNavigation(item.path)}
                >
                  <span>{item.icon}</span>
                  {item.name}
                  {item.badge > 0 && (
                    <span className={styles.notificationBadge}>{item.badge}</span>
                  )}
                </button>
              ))}
            </div>

            <div className={styles.userInfo}>
              <button onClick={() => navigate("/personal_cabinet")} className={styles.cabinetButton}>
                üë§ –ü—Ä–æ—Ñ—ñ–ª—å
              </button>
              <button onClick={handleLogout} className={styles.logoutButton}>
                üö™ –í–∏—Ö—ñ–¥
              </button>

              <div className={styles.menuIcon} onClick={toggleSidebar}>
                <span>‚ò∞</span>
              </div>
            </div>
          </>
        )}

        {!user && (
          <div className={styles.authButtons}>
            <button onClick={() => navigate("/login")} className={styles.loginButton}>
              –£–≤—ñ–π—Ç–∏
            </button>
            <button onClick={() => navigate("/registration")} className={styles.registerButton}>
              –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
            </button>
          </div>
        )}
      </div>

      {user && (
        <div className={`${styles.sidebar} ${sidebarOpen ? styles.open : ''}`}>
          <div className={styles.tabsContainer}>
            <ul className={styles.tabsList}>
              {availableTabs.map((tab, index) => (
                <li
                  key={index}
                  onClick={() => handleNavigation(tab.path)}
                  className={activeTab === tab.name ? styles.active : ''}
                >
                  <div>
                    <span className={styles.tabIcon}>{tab.icon}</span>
                    <span className={styles.tabName}>{tab.name}</span>
                  </div>

                  {tab.badge > 0 && (
                    <span className={styles.notificationBadge}>{tab.badge}</span>
                  )}
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}
    </header>
  );
};

export default Header;