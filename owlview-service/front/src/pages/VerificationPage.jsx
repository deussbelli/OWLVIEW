import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import apiClient from "../utils/axiosConfig";
import styles from "../styles/VerificationPage.module.css";

const VerificationPage = ({ user }) => {
  const [organizations, setOrganizations] = useState([]);
  const [reason, setReason] = useState("");
  const [selectedOrg, setSelectedOrg] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    if (!user || user.role !== "admin") {
      alert("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.");
      navigate("/");
      return;
    }
    fetchOrganizations();
  }, [user, navigate]);

  const fetchOrganizations = async () => {
    try {
      const response = await apiClient.get("/organizations");
      if (response.data.success) {
        setOrganizations(response.data.organizations);
      } else {
        console.error("–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", response.data.message);
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π:", error);
    }
  };

  const handleApprove = async (id) => {
    try {
      await apiClient.post("/organizations/approve", { id });
      setOrganizations((prev) => prev.filter((org) => org.id !== id));
      alert("–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∞!");
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:", error);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é.");
    }
  };

  const handleReject = async () => {
    if (!reason.trim()) {
      alert("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥–º–æ–≤–∏!");
      return;
    }

    try {
      await apiClient.post("/organizations/reject", { id: selectedOrg, reason });
      setOrganizations((prev) => prev.filter((org) => org.id !== selectedOrg));
      setReason("");
      setSelectedOrg(null);
      alert("–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞!");
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:", error);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é.");
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.animatedBackground}></div>
      <h1>–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π</h1>

      {organizations.length > 0 ? (
        <div className={styles.tableWrapper}>
          <table>
            <thead>
              <tr>
                <th>ID</th>
                <th>–ö–µ—Ä—ñ–≤–Ω–∏–∫</th>
                <th>–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó</th>
                <th>Email</th>
                <th>–ù–∞–∑–≤–∞</th>
                <th>–ú–µ—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó</th>
                <th>–°–æ—Ü–º–µ—Ä–µ–∂—ñ</th>
                <th>–î–æ–∫—É–º–µ–Ω—Ç–∏</th>
                <th>–°–∞–π—Ç</th>
                <th>–î—ñ—ó</th>
              </tr>
            </thead>
            <tbody>
              {organizations.map((org) => (
                <tr key={org.id}>
                  <td>{org.id}</td>
                  <td>{org.head_name}</td>
                  <td>{org.registration_date}</td>
                  <td>{org.email}</td>
                  <td>{org.name}</td>
                  <td>{org.registration_goal || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</td>
                  <td>
                    {Object.entries(org.social_links).map(([key, value]) =>
                      value ? (
                        <div key={key}>
                          {key}: <span>{value}</span>
                        </div>
                      ) : null
                    )}
                  </td>
                  <td>
                    {org.documents_path ? (
                      <a href={org.documents_path} target="_blank" rel="noopener noreferrer">
                        {org.documents_path}
                      </a>
                    ) : (
                      "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"
                    )}
                  </td>
                  <td>
                    <a href={org.website} target="_blank" rel="noopener noreferrer">
                      {org.website || "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"}
                    </a>
                  </td>
                  <td>
                    {(org.is_verified !== 1 && !org.rejection_reason) ||
                      (org.is_verified === 1 && !org.rejection_reason) && (
                        <div className={styles.buttonGroup}>
                          <button
                            className={`${styles.button} ${styles.approveButton}`}
                            onClick={() => handleApprove(org.id)}
                          >
                            –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏
                          </button>
                          <button
                            className={`${styles.button} ${styles.rejectButton}`}
                            onClick={() => setSelectedOrg(org.id)}
                          >
                            –í—ñ–¥—Ö–∏–ª–∏—Ç–∏
                          </button>
                        </div>
                      )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        <div className={styles.emptyState}>
          <div className={styles.emptyStateIcon}>üì≠</div>
          <p>–ù–µ–º–∞—î –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó</p>
        </div>
      )}

      {selectedOrg && (
        <div className={styles.rejectionModal}>
          <div className={styles.modalContent}>
            <h2>–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥–º–æ–≤–∏</h2>
            <textarea
              className={styles.textarea}
              value={reason}
              onChange={(e) => setReason(e.target.value)}
              placeholder="–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥–º–æ–≤–∏ —É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó..."
            />
            <button
              className={`${styles.button} ${styles.submitButton}`}
              onClick={handleReject}
            >
              –ù–∞–¥—ñ—Å–ª–∞—Ç–∏
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default VerificationPage;